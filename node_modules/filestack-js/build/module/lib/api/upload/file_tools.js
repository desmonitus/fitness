/*
 * Copyright (c) 2019 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { File as FsFile } from './file';
import { isNode, requireNode, getMimetype } from './../../utils';
import { FilestackError } from './../../../filestack_error';
var base64Regexp = /data:([a-zA-Z]*\/[a-zA-Z]*);base64,([^\"]*)/i;
/**
 * Check if file is buffer
 *
 * @node
 * @param input
 */
var isFileBuffer = function (input) { return Buffer.isBuffer(input); };
/**
 * Check if file is blob
 * @param input
 */
var isFileBlob = function (input) { return input.toString() === '[object Blob]'; };
/**
 * Check if input is instance of browser file
 *
 * @browser
 * @param input
 */
var isFileBrowser = function (input) { return input instanceof File; };
/**
 * Check if file is base64 string
 *
 * @param input
 */
var isFileBase = function (input) {
    if (typeof input !== 'string') {
        return false;
    }
    if (input.indexOf('base64') > -1) {
        input = input.match(base64Regexp).pop();
    }
    if (isNode()) {
        if (Buffer.from(input, 'base64').toString('base64') === input) {
            return true;
        }
        return false;
    }
    try {
        return btoa(atob(input)) === input;
    }
    catch (err) {
        /* istanbul ignore next */
        return false;
    }
};
/**
 * Check if file is instance of named interface
 *
 * @param input
 */
var isFileNamed = function (input) { return input && input['file'] && input['name']; };
/**
 * Check if input is a valid file path
 *
 * @node
 * @param input
 */
var isFilePath = function (input) { return requireNode('fs').existsSync(input); };
/**
 * Convert encoded base64 string or dataURI to blob
 *
 * @browser
 * @param b64data     String to decode
 * @param sliceSize   Byte quantity to split data into
 * @private
 * @returns {Blob}
 */
var b64toBlob = function (b64Data, sliceSize) {
    if (sliceSize === void 0) { sliceSize = 512; }
    var contentType = '';
    if (b64Data.indexOf('base64') > -1) {
        var matches = b64Data.match(base64Regexp);
        b64Data = matches.pop();
        contentType = matches[1];
    }
    var byteCharacters = atob(b64Data);
    var byteArrays = [];
    for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {
        var slice = byteCharacters.slice(offset, offset + sliceSize);
        var byteNumbers = new Array(slice.length);
        for (var i = 0; i < slice.length; i += 1) {
            byteNumbers[i] = slice.charCodeAt(i);
        }
        byteArrays.push(new Uint8Array(byteNumbers));
    }
    return new Blob(byteArrays, { type: contentType });
};
/**
 * Read file as array buffer
 *
 * @browser
 * @private
 * @param blob
 * @returns {Boolean}
 */
var readFile = function (file) {
    return new Promise(function (resolve, reject) {
        /* istanbul ignore next */
        if (!File || !FileReader || !Blob) {
            return reject(new FilestackError('The File APIs are not fully supported by your browser'));
        }
        var reader = new FileReader();
        reader.onloadend = function () { return resolve(reader.result); };
        reader.onerror = reject;
        reader.readAsArrayBuffer(file);
    });
};
// =================== BROWSER UTILS ===================
/**
 * Accepts b64string or blob file
 *
 * @browser
 * @param {*} fileOrString
 * @returns {Promise<File>}
 */
var getFileBrowser = function (input, sanitizeOptions) {
    var filename;
    var file;
    if (isFileNamed(input)) {
        filename = input.name;
        input = input.file;
    }
    if (isFileBrowser(input)) {
        file = input;
        filename = input.name;
    }
    else if (isFileBase(input)) {
        file = b64toBlob(input);
    }
    else if (isFileBlob(input)) {
        file = input;
    }
    else {
        return Promise.reject(new FilestackError('Unsupported input file type'));
    }
    return readFile(file).then(function (buffer) {
        return new FsFile({
            buffer: buffer,
            name: filename,
            size: buffer.byteLength,
            type: file.type || getMimetype(new Uint8Array(buffer)),
        }, sanitizeOptions);
    });
};
// =================== NODE UTILS ===================
/**
 * Accepts Buffer or filepath or base64 string
 *
 * @node
 * @param {*} inputFile
 * @returns {Promise<File>}
 */
var getFileNode = function (input, sanitizeOptions) {
    var filename;
    if (isFileNamed(input)) {
        filename = input.name;
        input = input.file;
    }
    if (isFilePath(input)) {
        var path_1 = input;
        return new Promise(function (resolve, reject) {
            return requireNode('fs').readFile(path_1, function (err, buffer) {
                if (err) {
                    return reject(err);
                }
                return resolve(new FsFile({
                    buffer: buffer,
                    name: filename || requireNode('path').basename(path_1),
                    size: buffer.byteLength,
                    type: getMimetype(buffer),
                }, sanitizeOptions));
            });
        });
    }
    if (isFileBase(input)) {
        input = Buffer.from(input, 'base64');
    }
    if (isFileBuffer(input)) {
        return Promise.resolve(new FsFile({
            buffer: input,
            name: filename,
            size: input.byteLength,
            type: getMimetype(input),
        }, sanitizeOptions));
    }
    return Promise.reject(new FilestackError('Unsupported input file type'));
};
export var getFile = function (input, sanitizeOptions) { return (isNode() ? getFileNode(input, sanitizeOptions) : getFileBrowser(input, sanitizeOptions)); };
